#! /bin/bash

# Program: dpm86
# Purpose: easy communication with DPM8600 Series Power Supply

#
# Should work with:
#
# - DPM8605 (see f. e. https://joy-it.net/en/products/JT-DPM8605)
# - DPM8608 (search on ebay)
# - DPM8616 (search on ebay)
# - DPM8624 (see f. e. https://joy-it.net/en/products/JT-DPM8624)
#
# ! Be aware !
# The power supply has to be set to "simple protocol".
#

# History:
# 220531-AHo: complete rewrite
# 220606-AHo: speedup/robustness 'echo' replaced by 'socat'
# 220607-AHo: Important bugfix - socat-parameter "flock" removed. It locks kernel memory which isn't freed.
# 220608-AHo: Raspberry is a can of drunken worms. :-/ Removed socat completely and replaced it by "echo" and "read".
# 220609-MSe: Small improvements and speedups. Added more comments.

#===== Variables

#----- Variables needed for syslog...

        ver="220608"                              # version of this script

#---- Init

        . ./basic-functions

#----- external programs


#----- variables

	# logging
	ltag="dpm86"
	lfacility="user"
	lfile="./dpm86.log"

	# DPM settings
	addr="01"			# Adress of the power supply. Default: 01. Check manual of the power suppy for more information.
	tty="/dev/ttyUSB0"		# The device via this script is talkinf to the power supply.
	voltage_min="0000"		# 00,00 Volt
	voltage_max="2900"		# 29,00 Volt --> check the manual of your power supply for the correct value
	current_min="0000"		# 0,000 Ampere
	current_max="12000"		# 9,000 Ampere --> check the manual of your power supply for the correct value
	timeout="5"			# timeout in communication

	# variables for a better reading
	read="r"
	write="w"
	ok="0"
	error="1"

	# supported dpm functions -- see the document "dpm86xx-series-power-supply_simple-communication-protocol.odt/pdf" in this repository
	f_voltage_target="10"		# R/W: output voltage target
	f_current_target="11"		# R/W :output current target
	f_output="12"			# R/W: output on/off
	f_voltage="30"			# R/-: output voltage
	f_current="31"			# R/-: output current
	f_const="32"			# R/W: constant current or constant voltage status
	f_temperature="33"		# R/-: temperature
	
	# parameter for dpm functions (just for a better reading)
	
				# function "f_output"
	p_off="0"		# parameter "off"
	p_on="1"		# parameter "on"

				# function "f_const"
	p_voltage="0"		# parameter "voltage"
	p_current="1"		# parameter "current"


# print a short help
function help () {

	echo
	echo " $0 -- tool for controlling DPM8600 series power supply"
	echo
	echo " Usage:"
	echo "           $0 facility action parameter"
	echo
	echo " Details:"
	echo "           output/o                   -- read the actual output state (on/off)"
	echo "           output/o 1/on              -- turn the output on"
	echo "           output/o 0/off             -- turn the output off"
	echo
	echo "           voltage/v                  -- read the actual delivered voltage"
	echo "           voltage/v <value>          -- set the voltage target"
	echo "           voltage/v target           -- read the voltage target"
	echo
	echo "           current/c                  -- read the actual deliviered current"
	echo "           current/c <value>          -- set the target"
	echo "           current/c target           -- current: read the target"
	echo
	echo "           const/C                    -- read the actual const setting (const voltage/const current)"
	echo "           const/C voltage/v          -- set constant voltage delivery"
	echo "           const/C current/c          -- set constant current delivery"
	echo
	echo "           temp/t                     -- read the temperature"
	echo
	echo "           read/r <function>          -- read value from function"
	echo "           write/w <function> <value> -- write <value> to <function>"
	echo
}

# initialise
function init () {

	# check device $tty: character device?
	if [ ! -c "$tty" ]; then 
		slog "init -- Device '$tty' is not a character device."
		echo "ERROR -- Device '$tty' is not a character device."
		exit $error
	fi

	# check device $tty: read access?
	if [ ! -r "$tty" ]; then 
		slog "init -- No permission to read from device '$tty'."
		echo "ERROR -- No permission to read from device '$tty'."
		exit $error
	fi

	# check device $tty: write access?
	if [ ! -w "$tty" ]; then 
		slog "init -- No permission to write to device '$tty'."
		echo "ERROR -- No permission to write to device '$tty'."
		exit $error
	fi

	# Configuring $tty for access via 'echo' and 'read'
        # 9600:         baud rate
        # cooked:       brkint ignpar istrip icrnl ixon opost isig icanon: eof and eol characters to their default values
        # clocal:       enable modem control signals (needed?)
        # -echo:        don't echo input characters (IMPORTANT)
        # -icrnl:       don't translate carriage return to newline
        stty -F $tty 9600 cooked clocal -echo -icrnl
}

### Communication with dpm86

# dpm86: lowlevel - write a value
function dpm86write () {

	local opcode="$1"
	local value="$2"
	local response=""

	# sending command
	cmd=":$addr$write$opcode=$value."
	slog "dpm86write -- sending '$cmd'"
	echo "$cmd\r\n" >$tty

	if [ $? -ne 0 ]; then
		slog "dpm86write -- Communication with dpm86 failed: sending failed."
		echo "ERROR -- Communication with dpm86 failed: sending failed."
		exit $error
        fi

	# reading response
	sleep 1
	slog "dpm86write -- reading response"
	read -s -t $timeout response <$tty

	if [ $? -ne 0 ]; then
		slog "dpm86write -- Communication with dpm86 failed: Timeout reading response."
		echo "ERROR -- Communication with dpm86 failed: Timeout reading response."
		exit $error
	fi

	# Response is something like this ":01ok\n" - we want to cut off the last character
        response=${response::-1}

	# check return value
	if [ "$response" == ":"$addr"ok"  ]; then
		slog "dpm86write -- received response '$response'"
		echo "ok"
		exit $ok
	else
		slog "dpm86write -- received response '$response'"
		echo "ERROR -- Response '$response' indicates that something went wrong."
		exit $error
	fi
}

# dpm86: lowlevel - read a value
function dpm86read () {

	local opcode="$1"
	local response=""

	# sending command
	local cmd=":$addr$read$opcode=0"
	slog "dpm86read -- sending: '$cmd'"
	echo "$cmd\r\n" >$tty 2>&1

	if [ $? -ne 0 ]; then
		slog "dpm86read -- Communication with dpm86 failed: sending failed."
		echo "ERROR -- Communication with dpm86 failed: sending failed ($result)"
		exit $error
	fi

        # reading response
	sleep 1
	slog "dpm86read -- reading response"
	read -s -t $timeout response <$tty

	if [ $? -ne 0  ]; then
                slog "dpm86read -- Communication with dpm86 failed: Timeout reading response."
                echo "ERROR -- Communication with dpm86 failed: Timeout reading response."
                exit $error
        fi

	# Response is something like this ":01r33=35.\n" - we want the part between the "=" and the "."
	response=`echo ${response%.*}`
	response=`echo ${response#*=}`

	slog "dpm86read -- received response '$response'"
	echo "$response"
	exit $ok
}

# ----- raw communication

# dpm read/r <function>
function cmd_read () {

	dpm86read ${args[1]}
}

# dpm write/w <function> <value>
function cmd_write () {

	dpm86write ${args[1]} ${args[2]}
}

# ----- turn output on/off

# output/o      ** read the actual output state (on/off)
function cmd_output_read () {

	dpm86read $f_output
}

# dpm86 output/o 1/on
function cmd_output_on () {

	dpm86write $f_output $p_on
}

# dpm86 output/o 0/off
function cmd_output_off () {

	dpm86write $f_output $p_off
}

# dpm output/o
function cmd_output () {

	case "${args[1]}" in
		
		""        ) cmd_output_read;;	# output/o      ** read the actual output state (on/off)"
		"1"|"on"  ) cmd_output_on;;	# output/o 1/on  -- turn the output on"
		"0"|"off" ) cmd_output_off;;	# output/o 0/off -- turn the output off
		*         ) echo
			    echo "Argument 'output': unknown parameter '${args[1]}'"
			    echo
                            exit $error
			    ;;
	esac
}

# ----- set constant voltage/current delivery

# const/C      ** read the actual const setting (const voltage/const current)
function cmd_const_read () {

	dpm86read $f_const
}

# dpm86 const/C voltage/v
function cmd_const_voltage () {

	dpm86write $f_const $p_voltage
}

# dpm86 const/C current/c
function cmd_const_current () {

	dpm86write $f_const $p_current
}

# dpm const/C ...
function cmd_const () {

	case "${args[1]}" in
		
		""            ) cmd_const_read;;
		"voltage"|"v" ) cmd_const_voltage;;
		"current"|"c" ) cmd_const_current;;
		*             ) echo
				echo "Argument 'const': unknown parameter '${args[1]}"
				echo
                            	exit $error;;
	esac
}

# ----- read the temperature

# dpm86 temp/t
function cmd_temp () {

	dpm86read $f_temperature
	exit
}

# ----- functions for reading/setting current stuff
#
#	is_valid_current	-- check if the parameter is a valid current
#	cmd_current_read	-- read the actual delivered current
#	cmd_current_target	-- read the current target
#	cmd_current_set		-- set the current target
#	cmd_current		-- switch to cmd_current_read/target/set


# check if the parameter is a valid current
function is_valid_current () {

	# ceck if argument is a positiv integer
	case $1 in
    		''|*[!0-9]*)	return 1;;
	esac
	
	# check if argument is within the boundaries
	if [ "$1" -lt "$current_min" ] || [ "$1" -gt "$current_max" ]; then
		return $error
	fi

	# everything okay
	return 0
}

# dpm86 current/c		(read the actual delivered current)
function cmd_current_read () {

	dpm86read $f_current
}

# dpm86 current/c target	(read the current target)
function cmd_current_target () {

	dpm86read $f_current_target
}

# dpm86 current/c <number>	(set the current target)
function cmd_current_set () {

	if is_valid_current ${args[1]}; then
		dpm86write $f_current_target ${args[1]}
	else
		echo
		echo "Argument 'current': invalid parameter '${args[1]}'"
		echo
		exit $error
	fi
}

# dpm86 current/c ...
function cmd_current () {

	case "${args[1]}" in
		
		""        )	cmd_current_read;;	# current/c          -- read the actual delivered current
		"target"  )	cmd_current_target;;	# current/c target   -- read the current target
		*         )	cmd_current_set;;	# current/c <value>  -- set the current target
	esac
}

# ----- functions for reading/setting voltage stuff
#
#	is_valid_voltage	-- check if the parameter is a valid voltage
#	cmd_voltage_read	-- read the actual delivered voltage
#	cmd_voltage_target	-- read the voltage target
#	cmd_voltage_set		-- set the voltage target
#	cmd_voltage		-- switch to cmd_voltage_read/target/set

# check if the parameter is a valid voltage
function is_valid_voltage () {

	# ceck if argument is a positiv integer
	case $1 in
    		''|*[!0-9]*)	return $error;;
	esac
	
	# check if argument is within the boundaries
	if [ "$1" -lt "$voltage_min" ] || [ "$1" -gt "$voltage_max" ]; then
		return $error
	fi

	# everyting ok
	return 0
}

# dpm86 voltage/v		(read the actual delivered voltage)
function cmd_voltage_read () {

	dpm86read $f_voltage
}

# dpm86 voltage/v target	(read the voltage target)
function cmd_voltage_target () {

	dpm86read $f_voltage_target
}

# dpm86 voltage/v <number>	(set the voltage target)
function cmd_voltage_set () {

	if is_valid_voltage ${args[1]}; then
		dpm86write $f_voltage_target ${args[1]}
	else
		echo
		echo "Argument 'voltage': invalid parameter '${args[1]}'"
		echo "Expected: integer between $voltage_min and $voltage_max."
		echo
		exit $error
	fi
}

# dpm86 voltage/v ...
function cmd_voltage () {

	case "${args[1]}" in
		
		""        )	cmd_voltage_read;;	# voltage/v          -- voltage: read the actual delivered voltage"
		"target"  )	cmd_voltage_target;;	# voltage/v target   -- voltage: read the target
		*         )	cmd_voltage_set;;	# voltage/v <value>  -- voltage: set the target
	esac
}

# analyse first parameter
function command_line_argument () {

	case "${args[0]}" in
		
		"output"|"o"  )	cmd_output;;
		"const"|"C"   ) cmd_const;;
		"temp"|"t"    )	cmd_temp;;
		"voltage"|"v" ) cmd_voltage;;
		"current"|"c" ) cmd_current;;
		"read"|"r"    ) cmd_read;;
		"write"|"w"   ) cmd_write;;
		*             )	echo "Unknown first command line argument '${args[0]}'"
				help
                        	exit $error
				;;
	esac
}

### Main Code

	init
	args=("$@")
	command_line_argument

# this is the last line :)
