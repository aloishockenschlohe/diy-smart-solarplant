#! /bin/bash

# Program: dssc
# Purpose: Controlling a small diy smart solar power plant. See: https://github.com/aloishockenschlohe/diy-smart-solarplant

# !!
# !! This code is in a early stage.
# !! The authors are really bad programmers.
# !! Use at own risk. You have been warned.
# !!

# History:
# 220512-AHo: first hack
# 220513-AHo: changed get_delta.
# 220516-AHo: added get_vz_power_consumption
# 220517-AHo: added init
# 220519-AHo: added statistics
# 220522-MSe: some debugging and a lot of cleanup... expect the unexpected. :-/
# 220523-AHo: added dpm_stable
# 220525-AHo: added dpm_stable_c
# 220528-AHo: documentation
# 220529-MSe: 'beautified' the output. :-D
# 220601-AHo: Code survived 6 hours. A special value killed it. Added some sanity checks.
# 220602-AHo: added some sanity checks.
# 220603-AHo: rewrote 'get_delta' - results look a lot better now :-)
# 220604-MSe: tuned 'get_delta'
# 220606-AHo: Code survived 24 hours. And it is still up and running.
# 220607-MSe: added comments, did some debugging
# 220610-AHo: Added a lot of comments. Code is still UGLY (but it seems to work). 

# External programs needed:
#
#  - bc (basic calculator)

#===== Variables

#----- Variables needed for syslog...

        ver="dssc_220610"                              # version of this script

#----- external programs

	debug="/bin/echo"
#	debug="/bin/false"

#----- variables

	# We read the power consumption from an instance in the local network via the tool 'wget'.
	#
	wget_args="-O - -q"
	vz_ip="192.168.178.20"
	vz_uuid="94f88820-261f-11ec-b8ce-9de20c49f0db"
	vz_url="http://$vz_ip/middleware/data/$vz_uuid.txt?from=now"

	# We provide information about the power supply (settings and delivered power) via a simple tcp server. 
	# variables for tcp server
	# Start the server with:
	#
	# nohup socat TCP4-LISTEN:12345,reuseaddr,fork EXEC:"cat /tmp/dpm86_current_power.txt",nofork,end-close &
	#
	# format of this file:
	# dpm86powerout 69.0
	srv_file="/tmp/dpm86_current_power.txt"

	# variables for the dpm86 power supply
	v_min="1600"			# minimum voltage	16.00 V
	v_max="2700"			# maximum voltage	27.00 V
	v_init="2650"			# int voltage		24.50 V
	c_min="0"			# minimum current	0.000 A
	c_max="9500"			# maximum current	8.500 A
	c_init="2000"			# init current		2.000 A

	# variables for a better understanding
	error="1"

### Procedures/Functions

# Get the actual power consumption from a volkszaehler.org instance.
function get_vz_power_consumption () {

	# Read the actual power consumption via wget
	local pc=`wget $wget_args $vz_url`
	
	# FIXME!
	# Error handling!
	
	# The response from volkszaehler.org looks like this: "-34.56 W"
	pc=`echo ${pc% *}`			# Cut everything behind the blank.
	pc=`echo ${pc%.*}`			# Cut the decimal places.
	if [[ -z $pc ]]; then pc="0"; fi	# If nothing is left (".45" -> "") set the power consumption to "0".

	# Sanity check. Are there other characters than 0-9 and "-"?
	case $pc in
    		''|*[!0-9\-]*)	$debug "get_vz_power_consumption: Return value from Volkszaehler.org is not a number: '$pc'"
    				echo "0"
    				return $error;;
	esac

	echo $pc
}

# Provide information about the delivered and the requested power in file '$srv_file'. Volkszaehler.org may read it.
function statistics () {

	local power=""
	local current=`./dpm86ng current`
	local voltage=`./dpm86ng voltage`

	# Calculate actual delivered power
	if [ "$current" -eq "0" ]; then
		power="0"		# No division by zero please. :-)
	else
		power=`echo "scale=2; $voltage/100*$current/1000" | bc -l`
	fi

	echo "dpm86powerout $power" > $srv_file
	echo "dpm86powersetting $w_setpoint" >> $srv_file
}

# Wait for a stable voltage and current. Used after the init of the power supply.
function dpm_stable () {

	local v_target="$1"
	local c_target="$2"
	local voltage="0"
	local current="0"
	local v_range="150"
	local c_range="150"
	local v_delta="0"
	local c_delta="0"
	local stable=0
	local rounds="0"
	
	echo "Waiting for stable voltage and current (max. 50 rounds)."
	echo "|====.====|====.====|====.====|====.====|====.====|"
	echo -n " "

	# Reapeat until 3 measurings in a row are ok or more than 50 measurings are done
	while (($stable < 3 && $rounds < 10)); do
	
		# Get actual delivered voltage and current. 
		voltage=`./dpm86ng voltage`
		current=`./dpm86ng current`

		# Calculate the distance between actual voltage/current and the corresponding target
		v_delta=`echo "scale=0; $voltage-$v_target" | bc -l`
		c_delta=`echo "scale=0; $current-$c_target" | bc -l`
		v_delta=${v_delta#-}
		c_delta=${c_delta#-}
		
		# If both values are close enough to the targets...
		if (($c_delta < $c_range && $v_delta < $v_range)); then
			# ...increase the stable counter,
			echo -n "+"
			((stable++))
		else
			# ...otherwise reset the sable counter to zero (row is broken).
			echo -n "-"
			stable="0"
		fi
		((rounds++))
	done
	echo
}

# After the current has been changed, sometimes the power supply needs some time to adopt. Wait for a stable current.
function dpm_stable_c () {

	local c_target="$1"
	local stable=0
	local c_range="150"
	local current="0"
	local c_delta="0"
	local rounds="0"

	echo "Waiting for stable current (max. 20 rounds)."
	echo "|====.====|====.====|"
	echo -n " "
	
	# Reapeat until 3 measurings in a row are ok or more than 20 measurings are done.
	while (($stable < 3 && $rounds < 21)); do
	
		# Get actual delivered current.
		current=`./dpm86ng current`
		
		# Calculate the delta between actual current and the target current.
		c_delta=`echo "scale=0; $current-$c_target" | bc -l`
		c_delta=${c_delta#-}
		
		# If delivered current is close enough to the target...
		if (($c_delta < $c_range)); then
			# ...increase the stable counter,
			echo -n "+"
			((stable++))
		else
			# ...otherwise reset the stable counter (row is broken).
			echo -n "-"
			stable="0"
		fi
		((rounds++))
	done
	echo
}

# Init of the dpm86 power supply.
#
# ToDo: Error handling.
# ToDo: $v_init and $c_init as parameter.
function dpm_init () {

	local result=""

	echo "dpm_init"
	echo "========"
	echo "Turning dpm off."
	result=`./dpm86ng output off`
	echo "Setting voltage to '$v_init' ticks."
	result=`./dpm86ng voltage $v_init`
	echo "Setting current to '$c_init' ticks."
	result=`./dpm86ng current $c_init`
	echo "Setting constant current."
	result=`./dpm86ng const current`
	echo "Turning dpm on."
	result=`./dpm86ng output on`

	# Wait until voltage and current are stabilized.
	dpm_stable $v_init $c_init
}

# Set a new current in the dpm86 power supply.
function dpm_adapt () {

	local c_setting=""
	local v_setting=""
	local current=""
	local voltage=""
	
	local delta_c=""
	local power=""

	# Read the actual deliverd voltage and current
	v_setting=`./dpm86ng voltage`
	c_setting=`./dpm86ng current`
	
	# ...and get voltage, current and power in a human readable form.
	voltage=`echo "scale=2; $v_setting/100" | bc -l`
	current=`echo "scale=2; $c_setting/1000" | bc -l`
	power=`echo "scale=2; $voltage*$current" | bc -l`

	# Calculate the new current setting
	voltage_target=`echo "scale=2; $v_init/100" | bc -l`
	power_target=`echo "scale=2; $power+$1" | bc -l`
	power_target=`echo ${power_target%.*}`
	if [ $power_target -lt "0" ]; then
		power_target="0"
	fi
	current_target=`echo "scale=2; $power_target/$voltage_target" | bc -l`
	echo "+++ dpm_adapt"
	echo "actual power consumption from grid: $1 W"
	echo "actual battery supply             : $power W [ $voltage V with $current A ]"
	echo "target battery supply             : $power_target W [ $voltage_target V with $current_target A ]"

	# Calculate the new setting for the current
	c_target_setting=`echo "scale=2; $current_target*1000" | bc -l`
	c_target_setting=`echo ${c_target_setting%.*}`					# cut of decimal places ("3.75" -> "3")
	if [[ -z $c_target_setting ]]; then 		c_target_setting="0"; fi	# if the whole numberis gone (".45" went to "") auf "0" setzen.
	if [ $c_target_setting -gt $c_max ]; then	c_target_setting=$c_max; fi	# check upper limit
	if [ $c_target_setting -lt "0" ]; then		c_target_setting="0"; fi	# check lower limit

	c_delta_setting=$(($c_target_setting-$c_setting))
	c_delta_setting=${c_delta_setting#-}

	max_a_delta="100"
	if [ $c_delta_setting -lt "$max_a_delta" ]; then
		echo "Current change would be too small - ignored."
	else
		# Set the new current (we are controlling the power source by the current - the voltage will be untouched).
		echo "Setting the new current setting '$c_target_setting'."
		./dpm86ng current $c_target_setting
		# Wait for a stable current.
		dpm_stable_c $c_target_setting
	fi
	
	# Update der gewuenschten Leistung ($w_setpoint)
	w_setpoint=$power_target
	statistics			# write some statistics for volkszaehler.org instance (this will take some time)
}

# Return the needed correction (in Watt)
function get_delta () {

	local measurements="$1"				# nr of measurements
	local pc_old="0"				# power consumption (old reading)
	local pc_now="0"				# power consumption (actual reading)
	local pc_sum="0"				# sum of all power consumption readings
	local cnt="1"					# counter
	local timestamp=`date "+%Y-%m-%d %H:%M:%S"`	# timestamp
	local my_delta="0"
	local max_delta="120"
	local divisor="0"
	
	echo
	echo "+++ get_delta"
	while [ $cnt -le $measurements ]; do

		# init
		if [ $cnt -eq "1" ]; then
			pc_old=`get_vz_power_consumption`	# read the current power consumption from volkszaehler.org
			pc_sum=$pc_old				# initialise of the sum of all readings (= current power consumption)
			((cnt++))
			$debug -n "$timestamp -- $measurements points -- '$pc_old' "
		fi

		statistics	# write some statistics for volkszaehler.org instance (this will take some time)

		# Calculate the change in power consumption.
		pc_now=`get_vz_power_consumption`		# Get current power consumption...
		my_delta=$((pc_old - pc_now))			# ...calculate the delta between current and last power consumption..
		my_delta=${my_delta#-}				# ...as a absolut value.
		$debug -n "($my_delta) '$pc_now' "
		
		# If the change is too big...
		if [ $my_delta -gt "$max_delta" ]; then
			# ...start a new series,
			$debug "--- Delta bigger than $max_delta! ---"
			cnt="1"
		else
			# ...otherwise add up the  
			pc_sum=$((pc_sum + (( pc_now * cnt )) ))	# Every measurment gets multiplied by its number in the series.
									# In this way, the younger the measured values, the higher they are weighted.
			pc_old=$pc_now
			((cnt++))
		fi
	done
	
	
	# Every measurment gets multiplied by its number in the series.
	# To build a kind of average, we have to sum the positions of the measurments.
	for ((cnt = 1 ; cnt <= $measurements ; cnt++)); do
		divisor=$((divisor + cnt))
	done

	# Calculate the average and call it "delta".
	delta=`echo "scale=0; $pc_sum/$divisor" | bc -l`
	$debug " = $delta"
}

### Main Code

echo "dssc, Version $ver"
echo

dpm_init

measurements="3"	# We start with a short tracking (3 measurements)
while true; do

	echo
	echo "+++ new cycle"
	get_delta $measurements
	if [ $delta -gt "50" ] || [ $delta -lt "-50" ]; then
		dpm_adapt $delta
		measurements="3"
		echo "Short tracking."
#	elif [ $delta -gt "5" ] || [ $delta -lt "-5" ]; then
	else
		dpm_adapt $delta
		measurements="5"
		echo "Normal tracking."
	fi
done

# this is the last line :)
